package main

import (
	"fmt"
	"os"
	"strconv"
	"strings"
)

type book struct {
	id        int
	title     string
	page      int
	stock     int
	price     float64
	stockCode int
	ISBN      int
	author    string
}

var books = []book{
	{
		id:        0,
		title:     "Things Fall Apart",
		page:      209,
		stock:     100,
		price:     19.90,
		stockCode: 1,
		ISBN:      9780435272463,
		author:    "0 - Chinua Achebe",
	},
	{
		id:        1,
		title:     "Fairy tales",
		page:      784,
		stock:     235,
		price:     14.90,
		stockCode: 1,
		ISBN:      9781783938322,
		author:    "Hans Christian Andersen ",
	},
	{
		id:        2,
		title:     "The Divine Comedy",
		page:      928,
		stock:     300,
		price:     29.90,
		stockCode: 1,
		ISBN:      9788889352311,
		author:    "Dante Alighieri",
	},
	{
		id:        3,
		title:     "Pride and Prejudice",
		page:      226,
		stock:     125,
		price:     14.90,
		stockCode: 1,
		ISBN:      9780192827609,
		author:    "Jane Austen",
	},
	{
		id:        4,
		title:     "Le Père Goriot",
		page:      443,
		stock:     60,
		price:     24.90,
		stockCode: 1,
		ISBN:      9780521327992,
		author:    "Honoré de Balzac ",
	},
}

func main() {
	command := os.Args[1]
	switch command {
	case "list":
		list(books)
	case "search":
		searchTerm := strings.Join(os.Args[2:], " ")
		search(books, searchTerm)
	case "get":
		searchedBookId := os.Args[2]
		get(books, searchedBookId)
	case "delete":
		deletedBookId := os.Args[2]
		delete(books, deletedBookId)
	case "buy":
		bookId := os.Args[2]
		orderQuantity := os.Args[3]
		buy(books, bookId, orderQuantity)
	default:
		fmt.Println("Please enter a valid command")
	}

	// buy(books, 0, 110)
	// get(books, 0)

}

func buy(books []book, Id string, order string) {
	bookId, err := strconv.Atoi(Id)
	if err != nil {
		fmt.Println("String conversation error on bookID")
	}
	quantity, err := strconv.Atoi(order)
	if err != nil {
		fmt.Println("String conversation error on order")

	}
	for _, book := range books {
		if bookId == book.id && book.stock >= quantity && book.stockCode == 1 {
			book.stock -= quantity
			fmt.Printf("%+v\n", book)
		} else if bookId == book.id && book.stock < quantity && book.stockCode == 1 {
			fmt.Println("Not enough books in stock. Please order less")
			fmt.Printf("%+v\n", book)
		} else if bookId == book.id && book.stock >= quantity && book.stockCode == 0 {
			fmt.Println("Book is not available for sale. Please try later")
		}
	}
}

func delete(books []book, bookId string) {
	id, err := strconv.Atoi(bookId)
	if err != nil {
		fmt.Println("String conversation error!")
	}
	for i, book := range books {
		if id == book.id {
			books[i].stockCode = 0
		}
	}
	fmt.Printf("%+v\n", books)
}

func get(books []book, bookId string) {
	id, err := strconv.Atoi(bookId)
	if err != nil {
		fmt.Println("String conversation error!")
	}
	for _, book := range books {
		if id == book.id {
			fmt.Println(book.title)
		}
	}
}

func list(books []book) {
	for _, book := range books {
		if book.stockCode == 1 {
			fmt.Println(book.title)
		}
	}
}

func search(books []book, searchTerm string) {
	var foundBooks []string
	for _, book := range books {
		if strings.Contains(strings.ToLower(book.title), strings.ToLower(searchTerm)) && book.stockCode == 1 {
			foundBooks = append(foundBooks, book.title)
		}
	}
	for _, found := range foundBooks {
		fmt.Println(found)
	}
}

// ----------------------------------------------------------------------------------------------------------------

// func newBook() *book {
// 	return &book{}
// }

// func (b *book) setId(id int) *book {
// 	b.id = id
// 	return b
// }
// func (b *book) setName(name string) *book {
// 	b.title = name
// 	return b
// }
// func (b *book) setStock(stock int) *book {
// 	b.stock = stock
// 	return b
// }

// func (b *book) setPrice(price float64) *book {
// 	b.price = price
// 	return b
// }

// func (b *book) setStockCode(stockCode int) *book {
// 	b.stockCode = stockCode
// 	return b
// }

// func (b *book) setISBN(ISBN int) *book {
// 	b.ISBN = ISBN
// 	return b
// }

// func (b *book) setAuthor(author string) *book {
// 	b.author = author
// 	return b
// }
